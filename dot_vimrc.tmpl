set nocompatible              " be iMproved, required
filetype off                  " required


" SET PYTHON, IF USING.

{{ if .vim_use_python -}}
" Sets python path.
let g:python3_host_prog = '{{- .vim_python_path -}}'
{{ end }}

" VUNDLE
" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" >>>>>>>> MY PLUGINS<<<<<<<
" THEMES
Plugin 'embark-theme/vim', { 'as': 'embark', 'branch': 'main' }
Plugin 'chrisbra/csv.vim'
"Plugin 'rbong/vim-crystalline'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'

" SNIPPETS
Plugin 'SirVer/ultisnips'

"CODING
Plugin 'Yggdroot/indentLine'


"LINTER
Plugin 'dense-analysis/ale'

" FERN
Plugin 'lambdalisue/fern.vim'
Plugin 'lambdalisue/fern-git-status.vim'

" COMMETNER
Plugin 'tpope/vim-commentary'

" MARKDOWN
Plugin 'gabrielelana/vim-markdown'

" GIT
Plugin 'tpope/vim-fugitive'

" LATEX
Plugin 'lervag/vimtex'

" LATEX SNIPPETS
Plugin 'honza/vim-snippets'


" PYTHON REQUIRED PLUGINS.
{{ if .vim_use_python }}
" BLACK [[CODE FORMATTER]]
Plugin 'psf/black'

"CODE COMPLETION
Plugin 'ycm-core/YouCompleteMe'
{{ end }}


call vundle#end()            " required

filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
" filetype plugin on

" PYTHON REQUIRED CONFIG
{{ if .vim_use_python }}
" BLACK [[CODE FORMATTER]]
let g:python3env = fnamemodify(g:python3_host_prog, ":h:h")
let g:black_virtualenv = g:python3env
{{ end }}


" SEARCH CONFIG
set is " Enable incremental search.
set hls " Highlight all matches.
" This unsets the "last search pattern" register by hitting return
:nnoremap <silent> <CR> :nohlsearch<CR><CR>


" CODING
" syntax highlighting
syntax enable


" AUTOCOMPLETE (Omni-complete)
set omnifunc=syntaxcomplete#Complete

" SNIPPETS CONFIG
let g:UltiSnipsExpandTrigger       = '<Tab>'    " use Tab to expand snippets
let g:UltiSnipsJumpForwardTrigger  = '<Tab>'    " use Tab to move forward through tabstops
let g:UltiSnipsJumpBackwardTrigger = '<S-Tab>'  " use Shift-Tab to move backward through tabstops

" snippet location.
let g:UltiSnipsSnippetDirectories=[$HOME.'/.vim/UltiSnips']


" VISUAL SETTINGS
" COLOR SCHEME
colorscheme embark
if exists('+termguicolors')
  let &t_8f="\<Esc>[38;2;%lu;%lu;%lum"
  let &t_8b="\<Esc>[48;2;%lu;%lu;%lum"
"  set termguicolors
endif

" AIRLINE COLORSCHEME
let g:airline_theme='bubblegum'
let g:airline_powerline_fonts = 1
set laststatus=2

" LINE NUMBERS
highlight LineNr ctermfg=LightGreen




" LINE NUMBERS
set number
set relativenumber


" CONCEALING [MAY BE CHANGED BY `ftplugin` files]
" Default
set conceallevel=1
" default ''.
" n for Normal mode
" v for Visual mode
" i for Insert mode
" c for Command line editing, for 'incsearch'
set concealcursor="nv"

" SHOW SPACES
set lcs+=space:·
set list


" KEY REMAPS
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" BACKSPACE
set backspace=indent,eol,start

" TAB STUFF.
" REVERSE TAB in INSERT MODE
inoremap <S-Tab> <C-d>
vnoremap <TAB> >gv
vnoremap <S-TAB> <gv


" SPLIT PLANE SETTINGS
set splitbelow
set splitright

" FERN CUSTOM
let g:fern#renderer#default#leading = "│"
let g:fern#renderer#default#root_symbol = "┬ "
let g:fern#renderer#default#leaf_symbol = "├─ "
let g:fern#renderer#default#collapsed_symbol = "├─ "
let g:fern#renderer#default#expanded_symbol = "├┬ "

" Exclute some files from Fern viewer.
let g:fern#default_hidden=1

" Add dirs and files inside the brackets that need to remain hidden
let hide_dirs  = '^\%(\.git\|node_modules\)$'  " here you write the dir names 
let hide_files = '\%(\.aux\|\.fls\|\.fdb_latexmk\|\.synctex.gz\|\.toc\|\.bbl\|\.blg\|\.log\)\+'    " here you write the file names

let g:fern#default_exclude = hide_dirs . '\|' . hide_files  " here you exclude them

" COMMENTARY.VIM
xmap gg <PLUG>Commentary
nmap gg <PLUG>Commentary

" ALE
let g:ale_sign_error = '●'
nmap <silent> <leader>aj :ALENext<cr>
nmap <silent> <leader>ak :ALEPrevious<cr>

" Let indentLine use current conceal options
let g:indentLine_conceallevel  = &conceallevel
let g:indentLine_concealcursor = &concealcursor
